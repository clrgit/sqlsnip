#!/usr/bin/env ruby

require 'shellopts'
require 'indented_io'

require 'sqlsnip.rb'

SPEC = %(
  @ Pre-process a SQL snippet

  -- FILE [START [STOP]]

  Prepares a range of lines in a SQL file for execution by adding drop
  statements for objects defined in the range. If the range is absent, the
  whole file is executed. Prints the resulting SQL script on standard output so
  it can be piped to psql(1)

  The range is given by a start and a stop line number (inclusive). It is
  scanned for lines matching 'create' and a drop statement is added for each
  match. Table, view, function, procedure, and trigger objects are supported.
  'or replace' definitions does not generate drop statements

  The whole file is also scanned for 'set search_path' statements to determine
  the current schema at the beginning of the snippet. If not found the schema
  is determined from the file name. It is assumed that the file exists in a
  prick(1) directory hierarchy

  Note that the parser is very primitive: It expects the header of the
  definition to be on one line. It also doesn't know about comments

  -i,interactive
    Emit PSQL session statements (ON_ERROR_STOP)

  -s,schema=SCHEMA?
    Set initial search path. If SCHEMA is absent no initial search path is
    emitted. Explicit search path settings in the source are always emitted

  -d,drop-only
    Only emit drop-statements. Can be used to insert drop statements in the
    current editor

  EXAMPLE

  sqlsnip can be used to create a vim macro in .vimrcc that executes the
  selected text or the whole file:

    \\function! PrepareSqlRange() range
      let path = expand('%:p')
      let start_line = line("'<")
      let end_line = line("'>")
      let result = system('sqlsnip ' . path . ' ' . start_line . ' ' . end_line . ' | psql')
      echo result
    endfunction

    " CTRL-X - execute selected range
    map <C-X> :call PrepareSqlRange()<CR>

  ...or the whole file

    \\function! PrepareSqlFile() range
      let path = expand('%:p')
      let result = system('sqlsnip' . path . ' | psql')
      echo result
    endfunction

    " CTRL+G - execute whole file
    map <C-G> :call PrepareSqlFile()<CR>

  ...or to just replace the current selected text with drop statements

    \\function! ReplaceSqlRange() range " ChatGPT
      let start_line = line("'<")
      let end_line = line("'>")
      let save_cursor = getpos('.')
      let range_text = getline(start_line, end_line)
      let path = expand('%:p')
      let shell_output = system('bundle exec exe/sqlsnip -ds"" ' . path)
      let shell_output_lines = split(shell_output, "\n")
      call deletebufline('%', start_line, end_line)
      call append(start_line - 1, shell_output_lines)
      call setpos('.', save_cursor)
    endfunction

    " CTRL+I - insert drop statements
    map <C-I> :call ReplaceSqlRange()<CR>

)

opts, args = ShellOpts.process(SPEC, ARGV)
file, start_line, stop_line = args.expect(1..3)
start_line &&= start_line.to_i
stop_line &&= stop_line.to_i

search_path = opts.schema? ? opts.schema || "" : nil

source = Sqlsnip::Source.parse(file, start_line, stop_line, search_path: search_path)
puts source.generate(interactive: opts.interactive?)

if !opts.drop_only?
  puts
  puts source.lines
end

